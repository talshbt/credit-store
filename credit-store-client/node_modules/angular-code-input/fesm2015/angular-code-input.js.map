{"version":3,"file":"angular-code-input.js","sources":["../../../angular-code-input/src/lib/code-input.component.config.ts","../../../angular-code-input/src/lib/code-input.component.ts","../../../angular-code-input/src/lib/code-input.module.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\nexport const CodeInputComponentConfigToken = new InjectionToken<CodeInputComponentConfig>('CodeInputComponentConfig');\r\n\r\nexport interface CodeInputComponentConfig {\r\n  codeLength?: number;\r\n  inputType?: string;\r\n  initialFocusField?: number;\r\n  isCharsCode?: boolean;\r\n  isCodeHidden?: boolean;\r\n  isPrevFocusableAfterClearing?: boolean;\r\n  isFocusingOnLastByClickIfFilled?: boolean;\r\n  code?: string | number;\r\n}\r\n\r\nexport const defaultComponentConfig: CodeInputComponentConfig = {\r\n  codeLength: 4,\r\n  inputType: 'tel',\r\n  initialFocusField: undefined,\r\n  isCharsCode: false,\r\n  isCodeHidden: false,\r\n  isPrevFocusableAfterClearing: true,\r\n  isFocusingOnLastByClickIfFilled: false,\r\n  code: undefined\r\n};\r\n","import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport {\n  CodeInputComponentConfig,\n  CodeInputComponentConfigToken,\n  defaultComponentConfig\n} from './code-input.component.config';\n\nenum InputState {\n  ready = 0,\n  reset = 1\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: ['./code-input.component.scss']\n})\nexport class CodeInputComponent implements AfterViewInit, OnInit, OnChanges, AfterViewChecked, CodeInputComponentConfig {\n\n  @ViewChildren('input') inputsList !: QueryList<ElementRef>;\n\n  @Input() codeLength !: number;\n  @Input() inputType !: string;\n  @Input() initialFocusField?: number;\n  /** @deprecated Use isCharsCode prop instead. */\n  @Input() isNonDigitsCode = false;\n  @Input() isCharsCode !: boolean;\n  @Input() isCodeHidden !: boolean;\n  @Input() isPrevFocusableAfterClearing !: boolean;\n  @Input() isFocusingOnLastByClickIfFilled !: boolean;\n  @Input() code ?: string | number;\n\n  @Output() readonly codeChanged = new EventEmitter<string>();\n  @Output() readonly codeCompleted = new EventEmitter<string>();\n\n  public placeholders !: number[];\n\n  private inputs: HTMLInputElement[] = [];\n  private inputsStates: InputState[] = [];\n\n  // tslint:disable-next-line:variable-name\n  private _codeLength !: number;\n  private state = {\n    isFocusingAfterAppearingCompleted: false,\n    isInitialFocusFieldEnabled: false\n  };\n\n  constructor(@Optional() @Inject(CodeInputComponentConfigToken) config?: CodeInputComponentConfig) {\n    Object.assign(this, defaultComponentConfig);\n\n    if (!config) {\n      return;\n    }\n\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n\n  /**\n   * Life cycle\n   */\n\n  ngOnInit(): void {\n    // defining internal code length prop for skipping external prop updates\n    this._codeLength = this.codeLength;\n    this.placeholders = Array(this._codeLength).fill(1);\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n  }\n\n  ngAfterViewInit(): void {\n    this.inputsList.forEach((item) => {\n      this.inputs.push(item.nativeElement);\n      this.inputsStates.push(InputState.ready);\n    });\n\n    // the @Input code might have value. Checking\n    this.onInputCodeChanges();\n  }\n\n  ngAfterViewChecked(): void {\n    this.focusOnInputAfterAppearing();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  reset(isChangesEmitting = false): void {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField!);\n    }\n\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n\n  focusOnField(index: number): void {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n\n    this.inputs[index].focus();\n  }\n\n  onClick(e: any): void {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n\n  onInput(e: any, i: number): void {\n    const target = e.target;\n    const value = e.data || target.value;\n\n    if (this.isEmpty(value)) {\n      return;\n    }\n\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n\n    this.inputs[next].focus();\n  }\n\n  onPaste(e: ClipboardEvent, i: number): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n\n    if (this.isEmpty(data)) {\n      return;\n    }\n\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data!.split('');\n    let valIndex = 0;\n\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n\n      const input = this.inputs[j];\n      const val = values[valIndex];\n\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n\n  async onKeydown(e: any, i: number): Promise<void> {\n    const target = e.target;\n    const isTargetEmpty = this.isEmpty(target.value);\n    const prev = i - 1;\n\n    // processing only backspace events\n    const isBackspaceKey = await this.isBackspaceKey(e);\n    if (!isBackspaceKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.setInputValue(target, null);\n    if (!isTargetEmpty) {\n      this.emitChanges();\n    }\n\n    if (prev < 0) {\n      return;\n    }\n\n    if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n      this.inputs[prev].focus();\n    }\n  }\n\n  private onInputCodeChanges(): void {\n    if (!this.inputs.length) {\n      return;\n    }\n\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach((input: HTMLInputElement) => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code!.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n\n    this.inputs.forEach((input: HTMLInputElement, index: number) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n\n  private focusOnInputAfterAppearing(): void {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField!);\n    // tslint:disable-next-line:no-non-null-assertion\n    this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField!];\n  }\n\n  private emitChanges(): void {\n    setTimeout(() => this.emitCode(), 50);\n  }\n\n  private emitCode(): void {\n    const code = this.getCurrentFilledCode();\n\n    this.codeChanged.emit(code);\n\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n\n  private getCurrentFilledCode(): string {\n    let code = '';\n\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n\n    return code;\n  }\n\n  private isBackspaceKey(e: any): Promise<boolean> {\n    const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n\n  private setInputValue(input: HTMLInputElement, value: any): void {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.add(emptyClassCSS);\n    }\n    else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.remove(emptyClassCSS);\n    }\n  }\n\n  private canInputValue(value: any): boolean {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\n  }\n\n  private setStateForInput(input: HTMLInputElement, state: InputState): void {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n\n    this.inputsStates[index] = state;\n  }\n\n  private getStateForInput(input: HTMLInputElement): InputState | undefined {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n\n  private isEmpty(value: any): boolean {\n    return  value === null || value === undefined || !value.toString().length;\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CodeInputComponent } from './code-input.component';\nimport {CommonModule} from '@angular/common';\nimport {CodeInputComponentConfig, CodeInputComponentConfigToken} from './code-input.component.config';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CodeInputComponent\n  ],\n  exports: [\n    CodeInputComponent\n  ]\n})\nexport class CodeInputModule {\n  static forRoot(config: CodeInputComponentConfig): ModuleWithProviders<CodeInputModule> {\n    return {\n      ngModule: CodeInputModule,\n      providers: [\n        {provide: CodeInputComponentConfigToken, useValue: config }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}