!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common")):"function"==typeof define&&define.amd?define("ngx-otp-input",["exports","@angular/core","@angular/forms","@angular/common"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self)["ngx-otp-input"]={},t.ng.core,t.ng.forms,t.ng.common)}(this,(function(t,e,n,o){"use strict";var s=function(){function t(){this.ngxOtpArray=new n.FormArray([]),this.focusedInputHasValue=!1,this.lastFocus=0,this.defaultAriaLabel="One time password input",this.ariaLabels=[],this.classList=[],this.otpChange=new e.EventEmitter,this.fill=new e.EventEmitter}return Object.defineProperty(t.prototype,"ngxOtpArrayControls",{get:function(){return this.ngxOtpArray.controls},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"status",{set:function(t){this.ngxOtpStatus=t,this.setInputClasses()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"disable",{set:function(t){this.isDisabled=t,this.handleDisable(t)},enumerable:!1,configurable:!0}),t.prototype.onPaste=function(t){t.preventDefault(),this.setValue(t.clipboardData.getData("text"))},t.prototype.ngOnInit=function(){this.setUpOtpForm(),this.setUpAriaLabels(),this.setInputClasses(),this.otpFormChangeListener(),void 0===this.config.autoblur&&(this.config.autoblur=!0)},t.prototype.ngAfterViewInit=function(){!this.config.numericInputMode&&this.config.pattern||this.otpInputElements.map((function(t){t.nativeElement.setAttribute("inputmode","numeric"),t.nativeElement.setAttribute("pattern","[0-9]*")})),this.config.autofocus&&this.setFocus(0)},t.prototype.ngOnDestroy=function(){this.ngxOtpArray$.unsubscribe()},t.prototype.getAriaLabelByIndex=function(t){return this.ariaLabels[t]?this.ariaLabels[t]:this.defaultAriaLabel},t.prototype.handleFocus=function(t){this.lastFocus=t,this.getInputElementByIndex(t).select()},t.prototype.handleKeyup=function(t,e){this.pattern.test(t)&&"Backspace"!==t?(this.getFormControlByIndex(e).setValue(t),this.stepForward(e)):"Backspace"===t&&this.stepBackward(e),this.setInputClasses()},t.prototype.handleKeydown=function(t){this.focusedInputHasValue=!!this.getFormControlByIndex(t).value},t.prototype.handleLeftArrow=function(t){t>0&&this.setFocus(t-1)},t.prototype.handleRightArrow=function(t){t<this.config.otpLength-1&&this.setFocus(t+1)},t.prototype.clear=function(){this.ngxOtpArray.reset(),this.setInputClasses()},t.prototype.setUpOtpForm=function(){for(var t=0;t<this.config.otpLength;t++)this.ngxOtpArray.push(new n.FormControl(null,[n.Validators.required]));this.pattern=this.config.pattern||/^\d+$/},t.prototype.setUpAriaLabels=function(){this.config.ariaLabels&&(Array.isArray(this.config.ariaLabels)?this.ariaLabels=this.config.ariaLabels:this.ariaLabels=new Array(this.config.otpLength).fill(this.config.ariaLabels))},t.prototype.setInputClasses=function(){for(var t,e,n=[],o=this.config.classList,s=0;s<this.config.otpLength;s++){var i=this.isInputFilled(s)&&(null===(t=this.config.classList)||void 0===t?void 0:t.inputFilled)||"",r=this.isDisabled?(null===(e=this.config.classList)||void 0===e?void 0:e.inputDisabled)||"ngx-otp-input-disabled":"",a="";"success"===this.ngxOtpStatus?a=this.config.classList.inputSuccess:"error"===this.ngxOtpStatus&&(a=this.config.classList.inputError),n[s]=[(null==o?void 0:o.input)||"",i,r,a]}this.classList=n},t.prototype.setValue=function(t){var e=this;if(this.pattern.test(t)){var n=0;t.split("").slice(0,this.config.otpLength).map((function(t,o){e.getFormControlByIndex(o).setValue(t),n=o})),this.setInputClasses(),this.setFocusAfterValueSet(n)}},t.prototype.handleDisable=function(t){var e,n;t?null===(e=this.ngxOtpArray)||void 0===e||e.disable():null===(n=this.ngxOtpArray)||void 0===n||n.enable(),this.setInputClasses()},t.prototype.stepForward=function(t){this.ngxOtpArray.valid&&this.config.autoblur?this.removeFocus(t):t<this.config.otpLength-1&&this.setFocus(t+1)},t.prototype.stepBackward=function(t){!this.focusedInputHasValue&&t>0&&this.setFocus(t-1)},t.prototype.setFocusAfterValueSet=function(t){t<this.config.otpLength-1?this.setFocus(t+1):this.removeFocus(this.lastFocus)},t.prototype.setFocus=function(t){this.getInputElementByIndex(t).focus()},t.prototype.removeFocus=function(t){this.getInputElementByIndex(t).blur()},t.prototype.isInputFilled=function(t){var e;return null===(e=this.getFormControlByIndex(t))||void 0===e?void 0:e.valid},t.prototype.getInputElementByIndex=function(t){return this.otpInputElements.toArray()[t].nativeElement},t.prototype.getFormControlByIndex=function(t){return this.ngxOtpArray.controls[t]},t.prototype.otpFormChangeListener=function(){var t=this;this.ngxOtpArray$=this.ngxOtpArray.valueChanges.subscribe((function(e){t.otpChange.emit(e),t.ngxOtpArray.valid&&t.fill.emit(e.join(""))}))},t}();s.decorators=[{type:e.Component,args:[{selector:"ngx-otp-input",template:'<form [ngClass]="config.classList?.container" class="ngx-otp-input-container">\n  <div\n    *ngFor="let control of ngxOtpArrayControls; let i = index"\n    [ngClass]="config.classList?.inputBox"\n    class="ngx-otp-input-box"\n  >\n    <label [attr.aria-label]="getAriaLabelByIndex(i)">\n      <input\n        #otpInputElement\n        [id]="\'ngx-otp-input-\' + i"\n        [formControl]="control"\n        [ngxOtpPattern]="pattern"\n        [type]="config.isPasswordInput ? \'password\' : \'text\'"\n        [ngClass]="classList[i]"\n        (focus)="handleFocus(i)"\n        (keyup)="handleKeyup($event.key, i)"\n        (keyup.arrowLeft)="handleLeftArrow(i)"\n        (keyup.arrowRight)="handleRightArrow(i)"\n        (keydown.backspace)="handleKeydown(i)"\n        class="ngx-otp-input"\n        maxlength="1"\n        autocomplete="off"\n        autocapitalize="off"\n        spellcheck="false"\n      />\n    </label>\n  </div>\n</form>\n',changeDetection:e.ChangeDetectionStrategy.OnPush,styles:[".ngx-otp-input-container{display:flex}.ngx-otp-input-box{margin:0 5px}.ngx-otp-input-box:first-child{margin-left:0}.ngx-otp-input-box:last-child{margin-right:0}.ngx-otp-input{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled{opacity:.3}"]}]}],s.ctorParameters=function(){return[]},s.propDecorators={config:[{type:e.Input}],status:[{type:e.Input}],disable:[{type:e.Input}],otpChange:[{type:e.Output}],fill:[{type:e.Output}],otpInputElements:[{type:e.ViewChildren,args:["otpInputElement"]}],onPaste:[{type:e.HostListener,args:["paste",["$event"]]}]};var i=function(){function t(){this.allowedKeys=["Backspace","ArrowLeft","ArrowRight","Escape","Tab"]}return t.prototype.onKeyDown=function(t){this.allowedKeys.includes(t.key)||"a"===t.key&&!0===t.ctrlKey||"c"===t.key&&!0===t.ctrlKey||"v"===t.key&&!0===t.ctrlKey||"x"===t.key&&!0===t.ctrlKey||"a"===t.key&&!0===t.metaKey||"c"===t.key&&!0===t.metaKey||"v"===t.key&&!0===t.metaKey||"x"===t.key&&!0===t.metaKey||this.pattern.test(t.key)||t.preventDefault()},t}();i.decorators=[{type:e.Directive,args:[{selector:"[ngxOtpPattern]"}]}],i.propDecorators={pattern:[{type:e.Input,args:["ngxOtpPattern"]}],onKeyDown:[{type:e.HostListener,args:["keydown",["$event"]]}]};var r=function(){};r.decorators=[{type:e.NgModule,args:[{declarations:[s,i],imports:[n.ReactiveFormsModule,n.FormsModule,o.CommonModule],exports:[s]}]}],t.NgxOtpInputComponent=s,t.NgxOtpInputModule=r,t.Éµa=i,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-otp-input.umd.min.js.map