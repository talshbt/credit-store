{"version":3,"sources":["../../../projects/ngx-otp-input/src/lib/component/ngx-otp-input.component.ts","../../../projects/ngx-otp-input/src/lib/pattern.directive.ts","../../../projects/ngx-otp-input/src/lib/ngx-otp-input.module.ts"],"names":["NgxOtpInputComponent","this","ngxOtpArray","FormArray","focusedInputHasValue","lastFocus","defaultAriaLabel","ariaLabels","classList","otpChange","EventEmitter","fill","Object","defineProperty","prototype","controls","status","ngxOtpStatus","setInputClasses","isDisabled","handleDisable","onPaste","event","preventDefault","setValue","clipboardData","getData","ngOnInit","setUpOtpForm","setUpAriaLabels","otpFormChangeListener","undefined","config","autoblur","ngAfterViewInit","numericInputMode","pattern","otpInputElements","map","element","nativeElement","setAttribute","autofocus","setFocus","ngOnDestroy","ngxOtpArray$","unsubscribe","getAriaLabelByIndex","index","handleFocus","getInputElementByIndex","select","handleKeyup","value","test","getFormControlByIndex","stepForward","stepBackward","handleKeydown","handleLeftArrow","handleRightArrow","otpLength","clear","reset","i","push","FormControl","Validators","required","Array","isArray","inputEntry","isFilled","isInputFilled","_a","inputFilled","_b","inputDisabled","inputSuccess","inputError","input","_this","lastIndex_1","split","slice","character","setFocusAfterValueSet","disable","enable","valid","removeFocus","lastIndex","focus","blur","toArray","valueChanges","subscribe","values","emit","join","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","ViewChildren","HostListener","PatternDirective","allowedKeys","onKeyDown","e","includes","key","ctrlKey","metaKey","Directive","NgModule","declarations","imports","ReactiveFormsModule","FormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { NgxOtpInputConfig, NgxOtpStatus } from './ngx-otp-input.model';\nimport { FormArray, FormControl, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-otp-input',\n  templateUrl: './ngx-otp-input.component.html',\n  styleUrls: ['./ngx-otp-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxOtpInputComponent implements OnInit, AfterViewInit, OnDestroy {\n  private ngxOtpArray = new FormArray([]);\n  private ngxOtpArray$: Subscription;\n  private focusedInputHasValue = false;\n  private lastFocus = 0;\n  private defaultAriaLabel = 'One time password input';\n  private isDisabled: boolean;\n  private ngxOtpStatus: NgxOtpStatus;\n\n  ariaLabels = [];\n  classList = [];\n  pattern: RegExp;\n\n  get ngxOtpArrayControls(): FormControl[] {\n    return this.ngxOtpArray.controls as FormControl[];\n  }\n\n  @Input() config: NgxOtpInputConfig;\n\n  @Input() set status(status: NgxOtpStatus) {\n    this.ngxOtpStatus = status;\n    this.setInputClasses();\n  }\n\n  @Input() set disable(isDisabled: boolean) {\n    this.isDisabled = isDisabled;\n    this.handleDisable(isDisabled);\n  }\n\n  @Output() otpChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() fill: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChildren('otpInputElement') otpInputElements: QueryList<ElementRef>;\n\n  @HostListener('paste', ['$event']) onPaste(event: ClipboardEvent): void {\n    event.preventDefault();\n    this.setValue(event.clipboardData.getData('text'));\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.setUpOtpForm();\n    this.setUpAriaLabels();\n    this.setInputClasses();\n    this.otpFormChangeListener();\n\n    if (this.config.autoblur === undefined) {\n      this.config.autoblur = true;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.config.numericInputMode || !this.config.pattern) {\n      this.otpInputElements.map((element) => {\n        element.nativeElement.setAttribute('inputmode', 'numeric');\n        element.nativeElement.setAttribute('pattern', '[0-9]*');\n      });\n    }\n\n    if (this.config.autofocus) {\n      this.setFocus(0);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.ngxOtpArray$.unsubscribe();\n  }\n\n  getAriaLabelByIndex(index: number): string {\n    return this.ariaLabels[index]\n      ? this.ariaLabels[index]\n      : this.defaultAriaLabel;\n  }\n\n  handleFocus(index: number): void {\n    this.lastFocus = index;\n    this.getInputElementByIndex(index).select();\n  }\n\n  handleKeyup(value: string, index: number): void {\n    if (this.pattern.test(value) && value !== 'Backspace') {\n      this.getFormControlByIndex(index).setValue(value); // prevent fast type errors\n      this.stepForward(index);\n    } else if (value === 'Backspace') {\n      this.stepBackward(index);\n    }\n\n    this.setInputClasses();\n  }\n\n  handleKeydown(index: number): void {\n    this.focusedInputHasValue = !!this.getFormControlByIndex(index).value;\n  }\n\n  handleLeftArrow(index: number): void {\n    if (index > 0) {\n      this.setFocus(index - 1);\n    }\n  }\n\n  handleRightArrow(index: number): void {\n    if (index < this.config.otpLength - 1) {\n      this.setFocus(index + 1);\n    }\n  }\n\n  clear(): void {\n    this.ngxOtpArray.reset();\n    this.setInputClasses();\n  }\n\n  private setUpOtpForm(): void {\n    for (let i = 0; i < this.config.otpLength; i++) {\n      this.ngxOtpArray.push(new FormControl(null, [Validators.required]));\n    }\n\n    this.pattern = this.config.pattern || /^\\d+$/;\n  }\n\n  private setUpAriaLabels(): void {\n    if (this.config.ariaLabels) {\n      Array.isArray(this.config.ariaLabels)\n        ? (this.ariaLabels = this.config.ariaLabels)\n        : (this.ariaLabels = new Array(this.config.otpLength).fill(\n            this.config.ariaLabels\n          ));\n    }\n  }\n\n  private setInputClasses(): void {\n    const inputEntry = [];\n    const classList = this.config.classList;\n\n    for (let i = 0; i < this.config.otpLength; i++) {\n      const isFilled = this.isInputFilled(i)\n        ? this.config.classList?.inputFilled || ''\n        : '';\n\n      const isDisabled = this.isDisabled\n        ? this.config.classList?.inputDisabled || 'ngx-otp-input-disabled'\n        : '';\n\n      let status: string | string[] = '';\n\n      if (this.ngxOtpStatus === 'success') {\n        status = this.config.classList.inputSuccess;\n      } else if (this.ngxOtpStatus === 'error') {\n        status = this.config.classList.inputError;\n      }\n\n      inputEntry[i] = [classList?.input || '', isFilled, isDisabled, status];\n    }\n\n    this.classList = inputEntry;\n  }\n\n  private setValue(value: string): void {\n    if (this.pattern.test(value)) {\n      let lastIndex = 0;\n      value\n        .split('')\n        .slice(0, this.config.otpLength)\n        .map((character: string, index: number) => {\n          this.getFormControlByIndex(index).setValue(character);\n          lastIndex = index;\n        });\n\n      this.setInputClasses();\n      this.setFocusAfterValueSet(lastIndex);\n    }\n  }\n\n  private handleDisable(disable: boolean): void {\n    disable ? this.ngxOtpArray?.disable() : this.ngxOtpArray?.enable();\n    this.setInputClasses();\n  }\n\n  private stepForward(index: number): void {\n    if (this.ngxOtpArray.valid && this.config.autoblur) {\n      this.removeFocus(index);\n    } else if (index < this.config.otpLength - 1) {\n      this.setFocus(index + 1);\n    }\n  }\n\n  private stepBackward(index: number): void {\n    if (!this.focusedInputHasValue && index > 0) {\n      this.setFocus(index - 1);\n    }\n  }\n\n  private setFocusAfterValueSet(lastIndex: number): void {\n    if (lastIndex < this.config.otpLength - 1) {\n      this.setFocus(lastIndex + 1);\n    } else {\n      this.removeFocus(this.lastFocus);\n    }\n  }\n\n  private setFocus(index: number): void {\n    this.getInputElementByIndex(index).focus();\n  }\n\n  private removeFocus(index: number): void {\n    this.getInputElementByIndex(index).blur();\n  }\n\n  private isInputFilled(index: number): boolean {\n    return this.getFormControlByIndex(index)?.valid;\n  }\n\n  private getInputElementByIndex(index: number): any {\n    return this.otpInputElements.toArray()[index].nativeElement;\n  }\n\n  private getFormControlByIndex(index: number): FormControl {\n    return this.ngxOtpArray.controls[index] as FormControl;\n  }\n\n  private otpFormChangeListener(): void {\n    this.ngxOtpArray$ = this.ngxOtpArray.valueChanges.subscribe((values) => {\n      this.otpChange.emit(values);\n\n      if (this.ngxOtpArray.valid) {\n        this.fill.emit(values.join(''));\n      }\n    });\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxOtpPattern]',\n})\nexport class PatternDirective {\n  // allowed keys apart from numeric characters\n  private allowedKeys = [\n    'Backspace',\n    'ArrowLeft',\n    'ArrowRight',\n    'Escape',\n    'Tab',\n  ];\n\n  @Input('ngxOtpPattern') pattern: RegExp;\n\n  @HostListener('keydown', ['$event']) onKeyDown(e: KeyboardEvent): void {\n    if (\n      this.allowedKeys.includes(e.key) ||\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\n      (e.key === 'a' && e.metaKey === true) || // Cmd+A (Mac)\n      (e.key === 'c' && e.metaKey === true) || // Cmd+C (Mac)\n      (e.key === 'v' && e.metaKey === true) || // Cmd+V (Mac)\n      (e.key === 'x' && e.metaKey === true) // Cmd+X (Mac)\n    ) {\n      return; // let it happen, don't do anything\n    } else if (!this.pattern.test(e.key)) {\n      e.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxOtpInputComponent } from './component/ngx-otp-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { PatternDirective } from './pattern.directive';\n\n@NgModule({\n  declarations: [NgxOtpInputComponent, PatternDirective],\n  imports: [ReactiveFormsModule, FormsModule, CommonModule],\n  exports: [NgxOtpInputComponent],\n})\nexport class NgxOtpInputModule {}\n"]}