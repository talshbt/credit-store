(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-otp-input', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-otp-input'] = {}, global.ng.core, global.ng.forms, global.ng.common));
}(this, (function (exports, core, forms, common) { 'use strict';

    var NgxOtpInputComponent = /** @class */ (function () {
        function NgxOtpInputComponent() {
            this.ngxOtpArray = new forms.FormArray([]);
            this.focusedInputHasValue = false;
            this.lastFocus = 0;
            this.defaultAriaLabel = 'One time password input';
            this.ariaLabels = [];
            this.classList = [];
            this.otpChange = new core.EventEmitter();
            this.fill = new core.EventEmitter();
        }
        Object.defineProperty(NgxOtpInputComponent.prototype, "ngxOtpArrayControls", {
            get: function () {
                return this.ngxOtpArray.controls;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxOtpInputComponent.prototype, "status", {
            set: function (status) {
                this.ngxOtpStatus = status;
                this.setInputClasses();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxOtpInputComponent.prototype, "disable", {
            set: function (isDisabled) {
                this.isDisabled = isDisabled;
                this.handleDisable(isDisabled);
            },
            enumerable: false,
            configurable: true
        });
        NgxOtpInputComponent.prototype.onPaste = function (event) {
            event.preventDefault();
            this.setValue(event.clipboardData.getData('text'));
        };
        NgxOtpInputComponent.prototype.ngOnInit = function () {
            this.setUpOtpForm();
            this.setUpAriaLabels();
            this.setInputClasses();
            this.otpFormChangeListener();
            if (this.config.autoblur === undefined) {
                this.config.autoblur = true;
            }
        };
        NgxOtpInputComponent.prototype.ngAfterViewInit = function () {
            if (this.config.numericInputMode || !this.config.pattern) {
                this.otpInputElements.map(function (element) {
                    element.nativeElement.setAttribute('inputmode', 'numeric');
                    element.nativeElement.setAttribute('pattern', '[0-9]*');
                });
            }
            if (this.config.autofocus) {
                this.setFocus(0);
            }
        };
        NgxOtpInputComponent.prototype.ngOnDestroy = function () {
            this.ngxOtpArray$.unsubscribe();
        };
        NgxOtpInputComponent.prototype.getAriaLabelByIndex = function (index) {
            return this.ariaLabels[index]
                ? this.ariaLabels[index]
                : this.defaultAriaLabel;
        };
        NgxOtpInputComponent.prototype.handleFocus = function (index) {
            this.lastFocus = index;
            this.getInputElementByIndex(index).select();
        };
        NgxOtpInputComponent.prototype.handleKeyup = function (value, index) {
            if (this.pattern.test(value) && value !== 'Backspace') {
                this.getFormControlByIndex(index).setValue(value); // prevent fast type errors
                this.stepForward(index);
            }
            else if (value === 'Backspace') {
                this.stepBackward(index);
            }
            this.setInputClasses();
        };
        NgxOtpInputComponent.prototype.handleKeydown = function (index) {
            this.focusedInputHasValue = !!this.getFormControlByIndex(index).value;
        };
        NgxOtpInputComponent.prototype.handleLeftArrow = function (index) {
            if (index > 0) {
                this.setFocus(index - 1);
            }
        };
        NgxOtpInputComponent.prototype.handleRightArrow = function (index) {
            if (index < this.config.otpLength - 1) {
                this.setFocus(index + 1);
            }
        };
        NgxOtpInputComponent.prototype.clear = function () {
            this.ngxOtpArray.reset();
            this.setInputClasses();
        };
        NgxOtpInputComponent.prototype.setUpOtpForm = function () {
            for (var i = 0; i < this.config.otpLength; i++) {
                this.ngxOtpArray.push(new forms.FormControl(null, [forms.Validators.required]));
            }
            this.pattern = this.config.pattern || /^\d+$/;
        };
        NgxOtpInputComponent.prototype.setUpAriaLabels = function () {
            if (this.config.ariaLabels) {
                Array.isArray(this.config.ariaLabels)
                    ? (this.ariaLabels = this.config.ariaLabels)
                    : (this.ariaLabels = new Array(this.config.otpLength).fill(this.config.ariaLabels));
            }
        };
        NgxOtpInputComponent.prototype.setInputClasses = function () {
            var _a, _b;
            var inputEntry = [];
            var classList = this.config.classList;
            for (var i = 0; i < this.config.otpLength; i++) {
                var isFilled = this.isInputFilled(i)
                    ? ((_a = this.config.classList) === null || _a === void 0 ? void 0 : _a.inputFilled) || ''
                    : '';
                var isDisabled = this.isDisabled
                    ? ((_b = this.config.classList) === null || _b === void 0 ? void 0 : _b.inputDisabled) || 'ngx-otp-input-disabled'
                    : '';
                var status = '';
                if (this.ngxOtpStatus === 'success') {
                    status = this.config.classList.inputSuccess;
                }
                else if (this.ngxOtpStatus === 'error') {
                    status = this.config.classList.inputError;
                }
                inputEntry[i] = [(classList === null || classList === void 0 ? void 0 : classList.input) || '', isFilled, isDisabled, status];
            }
            this.classList = inputEntry;
        };
        NgxOtpInputComponent.prototype.setValue = function (value) {
            var _this = this;
            if (this.pattern.test(value)) {
                var lastIndex_1 = 0;
                value
                    .split('')
                    .slice(0, this.config.otpLength)
                    .map(function (character, index) {
                    _this.getFormControlByIndex(index).setValue(character);
                    lastIndex_1 = index;
                });
                this.setInputClasses();
                this.setFocusAfterValueSet(lastIndex_1);
            }
        };
        NgxOtpInputComponent.prototype.handleDisable = function (disable) {
            var _a, _b;
            disable ? (_a = this.ngxOtpArray) === null || _a === void 0 ? void 0 : _a.disable() : (_b = this.ngxOtpArray) === null || _b === void 0 ? void 0 : _b.enable();
            this.setInputClasses();
        };
        NgxOtpInputComponent.prototype.stepForward = function (index) {
            if (this.ngxOtpArray.valid && this.config.autoblur) {
                this.removeFocus(index);
            }
            else if (index < this.config.otpLength - 1) {
                this.setFocus(index + 1);
            }
        };
        NgxOtpInputComponent.prototype.stepBackward = function (index) {
            if (!this.focusedInputHasValue && index > 0) {
                this.setFocus(index - 1);
            }
        };
        NgxOtpInputComponent.prototype.setFocusAfterValueSet = function (lastIndex) {
            if (lastIndex < this.config.otpLength - 1) {
                this.setFocus(lastIndex + 1);
            }
            else {
                this.removeFocus(this.lastFocus);
            }
        };
        NgxOtpInputComponent.prototype.setFocus = function (index) {
            this.getInputElementByIndex(index).focus();
        };
        NgxOtpInputComponent.prototype.removeFocus = function (index) {
            this.getInputElementByIndex(index).blur();
        };
        NgxOtpInputComponent.prototype.isInputFilled = function (index) {
            var _a;
            return (_a = this.getFormControlByIndex(index)) === null || _a === void 0 ? void 0 : _a.valid;
        };
        NgxOtpInputComponent.prototype.getInputElementByIndex = function (index) {
            return this.otpInputElements.toArray()[index].nativeElement;
        };
        NgxOtpInputComponent.prototype.getFormControlByIndex = function (index) {
            return this.ngxOtpArray.controls[index];
        };
        NgxOtpInputComponent.prototype.otpFormChangeListener = function () {
            var _this = this;
            this.ngxOtpArray$ = this.ngxOtpArray.valueChanges.subscribe(function (values) {
                _this.otpChange.emit(values);
                if (_this.ngxOtpArray.valid) {
                    _this.fill.emit(values.join(''));
                }
            });
        };
        return NgxOtpInputComponent;
    }());
    NgxOtpInputComponent.decorators = [
        { type: core.Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ngx-otp-input',
                    template: "<form [ngClass]=\"config.classList?.container\" class=\"ngx-otp-input-container\">\n  <div\n    *ngFor=\"let control of ngxOtpArrayControls; let i = index\"\n    [ngClass]=\"config.classList?.inputBox\"\n    class=\"ngx-otp-input-box\"\n  >\n    <label [attr.aria-label]=\"getAriaLabelByIndex(i)\">\n      <input\n        #otpInputElement\n        [id]=\"'ngx-otp-input-' + i\"\n        [formControl]=\"control\"\n        [ngxOtpPattern]=\"pattern\"\n        [type]=\"config.isPasswordInput ? 'password' : 'text'\"\n        [ngClass]=\"classList[i]\"\n        (focus)=\"handleFocus(i)\"\n        (keyup)=\"handleKeyup($event.key, i)\"\n        (keyup.arrowLeft)=\"handleLeftArrow(i)\"\n        (keyup.arrowRight)=\"handleRightArrow(i)\"\n        (keydown.backspace)=\"handleKeydown(i)\"\n        class=\"ngx-otp-input\"\n        maxlength=\"1\"\n        autocomplete=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n      />\n    </label>\n  </div>\n</form>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [".ngx-otp-input-container{display:flex}.ngx-otp-input-box{margin:0 5px}.ngx-otp-input-box:first-child{margin-left:0}.ngx-otp-input-box:last-child{margin-right:0}.ngx-otp-input{width:35px;height:35px;text-align:center;font-size:1.25rem;border:1px solid #212121;border-radius:4px;outline:0}.ngx-otp-input-disabled{opacity:.3}"]
                },] }
    ];
    NgxOtpInputComponent.ctorParameters = function () { return []; };
    NgxOtpInputComponent.propDecorators = {
        config: [{ type: core.Input }],
        status: [{ type: core.Input }],
        disable: [{ type: core.Input }],
        otpChange: [{ type: core.Output }],
        fill: [{ type: core.Output }],
        otpInputElements: [{ type: core.ViewChildren, args: ['otpInputElement',] }],
        onPaste: [{ type: core.HostListener, args: ['paste', ['$event'],] }]
    };

    var PatternDirective = /** @class */ (function () {
        function PatternDirective() {
            // allowed keys apart from numeric characters
            this.allowedKeys = [
                'Backspace',
                'ArrowLeft',
                'ArrowRight',
                'Escape',
                'Tab',
            ];
        }
        PatternDirective.prototype.onKeyDown = function (e) {
            if (this.allowedKeys.includes(e.key) ||
                (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A
                (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C
                (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V
                (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X
                (e.key === 'a' && e.metaKey === true) || // Cmd+A (Mac)
                (e.key === 'c' && e.metaKey === true) || // Cmd+C (Mac)
                (e.key === 'v' && e.metaKey === true) || // Cmd+V (Mac)
                (e.key === 'x' && e.metaKey === true) // Cmd+X (Mac)
            ) {
                return; // let it happen, don't do anything
            }
            else if (!this.pattern.test(e.key)) {
                e.preventDefault();
            }
        };
        return PatternDirective;
    }());
    PatternDirective.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[ngxOtpPattern]',
                },] }
    ];
    PatternDirective.propDecorators = {
        pattern: [{ type: core.Input, args: ['ngxOtpPattern',] }],
        onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
    };

    var NgxOtpInputModule = /** @class */ (function () {
        function NgxOtpInputModule() {
        }
        return NgxOtpInputModule;
    }());
    NgxOtpInputModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgxOtpInputComponent, PatternDirective],
                    imports: [forms.ReactiveFormsModule, forms.FormsModule, common.CommonModule],
                    exports: [NgxOtpInputComponent],
                },] }
    ];

    /*
     * Public API Surface of ngx-otp-input
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxOtpInputComponent = NgxOtpInputComponent;
    exports.NgxOtpInputModule = NgxOtpInputModule;
    exports.ɵa = PatternDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-otp-input.umd.js.map
